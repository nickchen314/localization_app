---
title: "Vignette"
author: "Tristan and Kento"
date: 12/11/2023
format: html
editor: visual
---

<<<<<<< HEAD
```{block, include: false}
#Contributers

## Data Cleaning

Primary Contributor: Nick
Co-Contributors:

## App Code

#Primary Contributor: Nick
#Co-Contributors: Tristan and Kento

## Documentation:

#Readme
Primary Contributor: Kento

#Vignette
Primary Contributor: Kento and Tristan
Co-Contributors:
```

## 1. YAML Header: Title, Author, Date, and Output Format

Title: USAID Localization App Author: Nick C, Kento H, Orion F, Tristan L. Data-413 (all members) Date: 12/8 Output Format: HTML

## 2. Use Case

Problem Addressed: The USAID Localization App is specifically designed to address the critical need for transparency and detailed analysis in the distribution of USAID funding. It focuses on a crucial aspect: quantifying and visualizing the share of funding allocated to local organizations within different countries. This need arises from USAID's ambitious goals set in November 2021 by Administrator Samantha Power, targeting a significant shift towards localization in aid distribution.

Target Users: 1. Development professionals seeking insights into the effectiveness and distribution of USAID funds. 2. Academic researchers analyzing trends in international aid and its local impact. 3. Members of non-governmental organizations (NGOs), particularly those classified as local, who are interested in understanding their role and representation in receiving aid. 4. General public members, especially those interested in the workings and impacts of international aid.

## 3. Required Packages

The USAID Localization App, developed with R and Shiny, utilizes a range of packages to facilitate its data processing, visualization, and user interface capabilities. Below is a detailed list of the required packages along with their primary functions within the app:

1.  shiny: The core framework for building interactive web applications directly from R. It provides the structure for the user interface and server components of the app.
2.  tidyverse: A collection of R packages designed for data science. It includes tools for data manipulation, exploration, and visualization. Key packages from tidyverse used in the app include dplyr for data manipulation and readr for reading data files.
3.  ggplot2: A system for declaratively creating graphics, based on the Grammar of Graphics. It is used for creating advanced and aesthetically pleasing visualizations within the app.
4.  bslib: Provides tools for using Bootstrap in Shiny applications. It is used to apply the Bootstrap 5 'Materia' theme to enhance the app's user interface design.
5.  scales: Provides methods for automatically determining break points and labels for axes and legends in ggplot2. It is particularly useful for formatting numeric labels in visualizations.
6.  DT: An interface to the JavaScript library DataTables, used in Shiny apps for rendering interactive tables.
7.  thematic: Provides tools for simplifying the styling of Shiny apps and R Markdown documents, especially for consistent theming in ggplot2 graphics.
8.  shinyWidgets: Extends the basic set of Shiny widgets with more sophisticated and customizable input widgets.
9.  plotly: An R package for creating interactive web-based graphics via the open source JavaScript graphing library Plotly.js. It is used to render interactive versions of ggplot2 graphics.

Additionally, the app incorporates custom functions and data processing scripts, as indicated in the business logic section. These include reading in data from RDS files, manipulating and joining data frames, defining UI elements, and setting up reactive elements for dynamic data visualization.

## 4. Data Source and Structure

The default data sources are two sets of RDS files: contracts_prime and grants_prime, which contain data regarding contracts and grants respectively. These data sources are located in a directory named data-raw, as indicated by the file paths in the scripts ("./data-raw/contracts.rds" and "./data-raw/grants.rds").

The general structure of the data, after processing through the func_clean_df function mentioned in app.R, is a single data frame named joined_df. This joined data frame contains variables from both the contracts and grants data sets. The exact variables included in joined_df are not fully listed in the vignette provided, but based on the operations in the scripts, we can infer some of the variables include:

1.  total_obligated_amount: The financial obligation amount for the grant or contract.
2.  award_base_action_date_fiscal_year: The fiscal year of the award date.
3.  primary_place_of_performance_country_name: The country where the contract or grant work is performed.
4.  is.local: A logical variable indicating whether the place of performance is the same as the recipient's country.
5.  is.grant: A logical variable indicating whether the record is a grant (TRUE) or a contract (FALSE).

Further, the data frames undergo various transformations, such as mutating to create new variables or filtering based on user input from the Shiny application interface.

For exploratory data analysis, the eda.R script loads CSV files with seemingly more recent data (Contracts_PrimeAwardSummaries_2023-10-01_H04M40S14_1.csv and Assistance_PrimeAwardSummaries_2023-10-09_H17M29S35_1.csv). It then selects certain columns for analysis and joins the data frames, similarly creating a joined_df. This EDA script also introduces a variable is.local to identify whether the performance country matches the recipient country and conducts an initial count of missing values (NAs) for the is.local variable and the total_obligated_amount.

## 5. EDA Inputs, Controls, and Outputs

We have a few inputs, such as the country (you can select more than 1), the a year range slider, a minimum award value, the type of grants (you can select more than 1), aggregate countries so you can put the graphs of the countries together or separate. Lets imagine you want to know the number of projects for awards for Albania and Algeria for both contracts and grants from 2003 to 2023, without a minimum award value in one two tables side by side. You will go to the Search a Country drop down menu and select Albania and Algeria, drag the year rang slider from to 2003, go to the What type(s) of awards and both should already be selected.

![](images/Image%2012-12-23%20at%2010.04%20AM.jpg){width="418" height="397"}

On the Count of Projects tab there should be four graphs:

2 for the Count of USAID Projects by Localization Status and Count of Projects

2 for the Proportion of Projects by Localization Status and Proportion of Projects

![](images/Image%2012-12-23%20at%2010.04%20AM%20(1).jpg)

If you go to the Dollar Value Projects Tab you will also have four graphs but this time the top graphs are by Dollar Value of Projects instead of Count of Projects. You will have

2 Obligations of USAID Projects by Localization Status graphs

2 Proportion of Project Obligations by Localization Status graphs

![](images/Image%2012-12-23%20at%2010.05%20AM%202.jpg)

On the Data Table Tab there is a large data table that has already been filtered by your inputs and you can download the table with our download table button and from there you can do any number of tests

![](images/Image%2012-12-23%20at%2010.05%20AM.jpg)

## 6. Statistical Analysis Inputs, Controls, and Outputs

Lets imagine you want to know the number of projects for awards for Albania and Algeria for both contracts and grants from 2003 to 2023, without a minimum award value in one two tables side by side. Pretty much the same as 5. You will go to the Search a Country drop down menu and select Albania and Algeria, drag the year rang slider from to 2003, go to the What type(s) of awards and both should already be selected. All these pictures and tables above give a good representation of the data in a visual format. From the data set that we downloaded from problem 5 we have the ability to perform any test we want on it

```{r}
example_dataset <- read.csv("../data/usaid_localization_data.csv")
summary(example_dataset)
sum(example_dataset$total_obligated_amount)
```

Now we have a full statistical view of any column we want or a sum of the money. It is yours to manipulate and explore!

## 
=======
```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
>>>>>>> refs/remotes/origin/tristans
